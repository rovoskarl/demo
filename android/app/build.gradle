apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 *
 * React Native
 *
 */
project.ext.vectoricons = [
    stageRelease: ".env.stage",
    stageDebug: ".env.stage",
    developmentRelease: ".env",
    developmentDebug: ".env",
    productionDebug: ".env.prod",
    productionRelease: ".env.prod",
    iconFontsDir: "../../node_modules/react-native-vector-icons/fonts.gradle",
    iconFontNames: ["Ionicons", "MaterialIcons", "EvilIcons"]
]


android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.tastien.smart_helper"
    defaultConfig {
        applicationId "com.tastien.smart_helper"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode project.env.get("APP_ANDROID_VERSION_CODE").toInteger()
        versionName project.env.get("APP_ANDROID_VERSION")
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

        release {
            if (project.hasProperty('SMARTHELPER_RELEASE_STORE_FILE')) {
                storeFile file(SMARTHELPER_RELEASE_STORE_FILE)
                storePassword SMARTHELPER_RELEASE_STORE_PASSWORD
                keyAlias SMARTHELPER_RELEASE_KEY_ALIAS
                keyPassword SMARTHELPER_RELEASE_KEY_PASSWORD
            }
        }
    }

    flavorDimensions "default"
    productFlavors {
        production
        development {
            applicationIdSuffix ".test"
            signingConfig signingConfigs.debug
            resValue "string", "build_config_package", "com.tastien.smart_helper"
        }

        stage {
            applicationIdSuffix ".stage"
            signingConfig signingConfigs.debug
            resValue "string", "build_config_package", "com.tastien.smart_helper"
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }

        release {
            productFlavors.production.signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"

            signingConfig null

            productFlavors.all { flavor ->
                // All release builds should be signed with the release config ...
                flavor.signingConfig signingConfigs.release
            }

            productFlavors.development.signingConfig signingConfigs.debug
            productFlavors.stage.signingConfig signingConfigs.debug

            // pushy hotupdate 添加下面这行以禁用crunch
            crunchPngs false
        }
    }

    repositories {
        // flatDir {
        //     // dirs project(':tastien_react-native-hik-cloudopen').file('libs'), "libs"
        // }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    // implementation("com.facebook.react:flipper-integration")
    // https://github.com/qiuxiang/react-native-amap3d/issues/778#issuecomment-1427649507
    implementation(project(':react-native-amap-geolocation')) {
        exclude group: 'com.amap.api', module: 'location'
    }

    implementation project(":telephone")

    implementation project(":utils")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
